/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package petclinic.api

import petclinic.model.Pet
import petclinic.model.PetFields
import petclinic.model.RestError
import petclinic.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object PetApi {

def apply(baseUrl: String = "http://localhost:9966/petclinic/api") = new PetApi(baseUrl)
}

class PetApi(baseUrl: String) {

  /**
   * Creates a pet .
   * 
   * Expected answers:
   *   code 200 : Pet (Pet type created successfully.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param pet The pet
   */
  def addPet(pet: Pet
): Request[Either[ResponseException[String, Exception], Pet], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/pets")
      .contentType("application/json")
      .body(pet)
      .response(asJson[Pet])

  /**
   * Records the details of a new pet.
   * 
   * Expected answers:
   *   code 201 : Pet (The pet was sucessfully added.)
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param ownerId The ID of the pet owner.
   * @param petFields The details of the new pet.
   */
  def addPetToOwner(ownerId: Int, petFields: PetFields
): Request[Either[ResponseException[String, Exception], Pet], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/owners/${ownerId}/pets")
      .contentType("application/json")
      .body(petFields)
      .response(asJson[Pet])

  /**
   * Returns the pet or a 404 error.
   * 
   * Expected answers:
   *   code 200 : Pet (Pet details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petId The ID of the pet.
   */
  def deletePet(petId: Int
): Request[Either[ResponseException[String, Exception], Pet], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/pets/${petId}")
      .contentType("application/json")
      .response(asJson[Pet])

  /**
   * Returns the pet or a 404 error.
   * 
   * Expected answers:
   *   code 200 : Pet (Pet details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param ownerId The ID of the pet owner.
   * @param petId The ID of the pet.
   */
  def getOwnersPet(ownerId: Int, petId: Int
): Request[Either[ResponseException[String, Exception], Pet], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/owners/${ownerId}/pets/${petId}")
      .contentType("application/json")
      .response(asJson[Pet])

  /**
   * Returns the pet  or a 404 error.
   * 
   * Expected answers:
   *   code 200 : Pet (Pet details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petId The ID of the pet.
   */
  def getPet(petId: Int
): Request[Either[ResponseException[String, Exception], Pet], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/pets/${petId}")
      .contentType("application/json")
      .response(asJson[Pet])

  /**
   * Returns an array of pet .
   * 
   * Expected answers:
   *   code 200 : Seq[Pet] (Pet types found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 500 : RestError (Server error.)
   */
  def listPets(
): Request[Either[ResponseException[String, Exception], Seq[Pet]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/pets")
      .contentType("application/json")
      .response(asJson[Seq[Pet]])

  /**
   * Updates the pet record with the specified details.
   * 
   * Expected answers:
   *   code 204 :  (Update successful.)
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found for this owner.)
   *   code 500 : RestError (Server error.)
   * 
   * @param ownerId The ID of the pet owner.
   * @param petId The ID of the pet.
   * @param petFields The pet details to use for the update.
   */
  def updateOwnersPet(ownerId: Int, petId: Int, petFields: PetFields
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/owners/${ownerId}/pets/${petId}")
      .contentType("application/json")
      .body(petFields)
      .response(asJson[Unit])

  /**
   * Returns the pet or a 404 error.
   * 
   * Expected answers:
   *   code 200 : Pet (Pet details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petId The ID of the pet.
   * @param pet The pet
   */
  def updatePet(petId: Int, pet: Pet
): Request[Either[ResponseException[String, Exception], Pet], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/pets/${petId}")
      .contentType("application/json")
      .body(pet)
      .response(asJson[Pet])

}
