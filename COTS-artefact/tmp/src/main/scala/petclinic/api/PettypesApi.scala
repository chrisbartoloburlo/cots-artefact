/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package petclinic.api

import petclinic.model.PetType
import petclinic.model.RestError
import petclinic.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object PettypesApi {

def apply(baseUrl: String = "http://localhost:9966/petclinic/api") = new PettypesApi(baseUrl)
}

class PettypesApi(baseUrl: String) {

  /**
   * Creates a pet type .
   * 
   * Expected answers:
   *   code 200 : PetType (Pet type created successfully.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet Type not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petType The pet type
   */
  def addPetType(petType: PetType
): Request[Either[ResponseException[String, Exception], PetType], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/pettypes")
      .contentType("application/json")
      .body(petType)
      .response(asJson[PetType])

  /**
   * Returns the pet type or a 404 error.
   * 
   * Expected answers:
   *   code 200 : PetType (Pet type details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet type not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petTypeId The ID of the pet type.
   */
  def deletePetType(petTypeId: Int
): Request[Either[ResponseException[String, Exception], PetType], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/pettypes/${petTypeId}")
      .contentType("application/json")
      .response(asJson[PetType])

  /**
   * Returns the pet type or a 404 error.
   * 
   * Expected answers:
   *   code 200 : PetType (Pet type details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet Type not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petTypeId The ID of the pet type.
   */
  def getPetType(petTypeId: Int
): Request[Either[ResponseException[String, Exception], PetType], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/pettypes/${petTypeId}")
      .contentType("application/json")
      .response(asJson[PetType])

  /**
   * Returns an array of pet types.
   * 
   * Expected answers:
   *   code 200 : Seq[PetType] (Pet types found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 500 : RestError (Server error.)
   */
  def listPetTypes(
): Request[Either[ResponseException[String, Exception], Seq[PetType]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/pettypes")
      .contentType("application/json")
      .response(asJson[Seq[PetType]])

  /**
   * Returns the pet type or a 404 error.
   * 
   * Expected answers:
   *   code 200 : PetType (Pet type details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Pet Type not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param petTypeId The ID of the pet type.
   * @param petType The pet type
   */
  def updatePetType(petTypeId: Int, petType: PetType
): Request[Either[ResponseException[String, Exception], PetType], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/pettypes/${petTypeId}")
      .contentType("application/json")
      .body(petType)
      .response(asJson[PetType])

}
