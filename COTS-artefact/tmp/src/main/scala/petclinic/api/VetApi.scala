/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package petclinic.api

import petclinic.model.RestError
import petclinic.model.Vet
import petclinic.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object VetApi {

def apply(baseUrl: String = "http://localhost:9966/petclinic/api") = new VetApi(baseUrl)
}

class VetApi(baseUrl: String) {

  /**
   * Creates a vet .
   * 
   * Expected answers:
   *   code 200 : Vet (Vet created successfully.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Vet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param vet The vet
   */
  def addVet(vet: Vet
): Request[Either[ResponseException[String, Exception], Vet], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/vets")
      .contentType("application/json")
      .body(vet)
      .response(asJson[Vet])

  /**
   * Returns the vet or a 404 error.
   * 
   * Expected answers:
   *   code 200 : Vet (Vet details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Vet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param vetId The ID of the vet.
   */
  def getVet(vetId: Int
): Request[Either[ResponseException[String, Exception], Vet], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/vets/${vetId}")
      .contentType("application/json")
      .response(asJson[Vet])

  /**
   * Returns an array of vets.
   * 
   * Expected answers:
   *   code 200 : Seq[Vet] (Vets found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 500 : RestError (Server error.)
   */
  def listVets(
): Request[Either[ResponseException[String, Exception], Seq[Vet]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/vets")
      .contentType("application/json")
      .response(asJson[Seq[Vet]])

  /**
   * Returns the vet or a 404 error.
   * 
   * Expected answers:
   *   code 200 : Vet (Pet type details found and returned.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 304 :  (Not modified.)
   *              Headers :
   *                ETag - An ID for this version of the response.
   *   code 400 : RestError (Bad request.)
   *   code 404 : RestError (Vet not found.)
   *   code 500 : RestError (Server error.)
   * 
   * @param vetId The ID of the vet.
   * @param vet The vet
   */
  def updateVet(vetId: Int, vet: Vet
): Request[Either[ResponseException[String, Exception], Vet], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/vets/${vetId}")
      .contentType("application/json")
      .body(vet)
      .response(asJson[Vet])

}
